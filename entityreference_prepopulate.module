<?php

/**
 * @file
 * Prepopulate entity reference values from URL.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function entityreference_prepopulate_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_field_create_instance().
 *
 * Add "default value function" setting to the field instance.
 * We have to do it from this hook, as we don't have another chance of setting
 * this option via the hook_field_info().
 */
function entityreference_prepopulate_field_create_instance($instance) {
  if (empty($instance['settings']['behaviors']['prepopulate']['status'])) {
    return;
  }

  $instance['default_value_function'] = 'entityreference_prepopulate_field_default_value';
  field_update_instance($instance);
}

/**
 * Implements hook_field_update_update().
 */
function entityreference_prepopulate_field_update_instance($instance, $prior_instance) {
  if (empty($instance['settings']['behaviors']['prepopulate'])) {
    return;
  }
  if (isset($prior_instance['settings']['behaviors']['prepopulate']['status']) && $instance['settings']['behaviors']['prepopulate']['status'] == $prior_instance['settings']['behaviors']['prepopulate']['status']) {
    // Nothing changed.
    return;
  }

  $instance['default_value_function'] = !empty($instance['settings']['behaviors']['prepopulate']['status']) ? 'entityreference_prepopulate_field_default_value' : '';
  field_update_instance($instance);
}


/**
 * Field default value callback.
 *
 * Set the default from the URL context. This works even if the widget is
 * not shown, e.g. due to restricted field access.
 */
function entityreference_prepopulate_field_default_value($entity_type, $entity, $field, $instance, $langcode) {
  if ($items = entityreference_prepopulate_get_values_from_url($field, $instance)) {
    // TODO: Check field cardinality.
    return $items;
  }
}

/**
 * Implements hook_field_attach_form().
 */
function entityreference_prepopulate_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  list($id,,$bundle) = entity_extract_ids($entity_type, $entity);
  if ($id) {
    // Entity is already saved.
    return;
  }

  if (!empty($form_state['triggering_element']['#ajax'])) {
    // We are inside AJAX, so values can't be taken from URL at the
    // moment.
    return;
  }


  foreach ($form_state['field'] as $field_name => $values) {
    foreach ($values as $lang => $value) {
      $instance = $value['instance'];
      if (empty($instance['settings']['behaviors']['prepopulate']['status'])) {
        continue;
      }
      $settings = $instance['settings']['behaviors']['prepopulate'];

      if (!empty($settings['skip_perm']) && user_access($settings['skip_perm'])) {
        continue;
      }

      if (!in_array($settings['fallback'], array('form_error', 'redirect')) && $settings['action'] != 'disable') {
        continue;
      }
      $field = $value['field'];
      if (entityreference_prepopulate_get_values_from_url($field, $instance)) {
        if ($settings['action'] == 'disable') {
          $form[$field_name][$lang]['#disabled'] = TRUE;
        }
        continue;
      }
      $message = t('Field @label must be populated via URL', array('@label' => $instance['label']));
      if ($settings['fallback'] == 'form_error') {
        form_error($form, $message);
      }
      elseif ($settings['fallback'] == 'redirect') {
        drupal_set_message($message, 'notice');
        drupal_goto();
      }
    }
  }
}

/**
 * Implements hook_field_access().
 */
function entityreference_prepopulate_field_access($op, $field, $entity_type, $entity, $account) {
  if ($op != 'edit' || $field['type'] != 'entityreference') {
    return;
  }

  if (empty($entity)) {
    // $entity might be NULL, so return early.
    // @see field_access().
    return;
  }

  list($id,,$bundle) = entity_extract_ids($entity_type, $entity);
  if ($id) {
    // Entity is already saved.
    return;
  }

  $instance = field_info_instance($entity_type, $field['field_name'], $bundle);
  if (empty($instance['settings']['behaviors']['prepopulate']['status'])) {
    return;
  }

  $settings = $instance['settings']['behaviors']['prepopulate'];
  if (!empty($settings['skip_perm']) && user_access($settings['skip_perm'])) {
    return;
  }
  $items = entityreference_prepopulate_get_values_from_url($field, $instance);

  if (!empty($items) && $settings['action'] == 'hide') {
    return FALSE;
  }
  elseif (empty($items) && $settings['fallback'] == 'hide') {
    return FALSE;
  }
}

/**
 * Get values for prepopulating fields, via URL.
 *
 * @param $field
 *   The field info array.
 * @param $instance
 *   The instance info array.
 */
function entityreference_prepopulate_get_values_from_url($field, $instance) {
  $cache = &drupal_static(__FUNCTION__, array());
  $field_name = $field['field_name'];
  $identifier = $instance['entity_type'] . ':' . $instance['bundle'] . ':' . $field_name;
  if (isset($cache[$identifier])) {
    return $cache[$identifier];
  }
  $cache[$identifier] = FALSE;

  if (empty($_GET[$field_name])) {
    return;
  }

  if (empty($instance['settings']['behaviors']['prepopulate']['status'])) {
    return;
  }

  $ids = explode(',', $_GET[$field_name]);

  // Check if the IDs are valid, and get filter out the ones that are not valid.
  $handler = entityreference_get_selection_handler($field, $instance);
  $ids = $handler->validateReferencableEntities($ids);
  if (!$ids) {
    return;
  }

  // Check access to the provided entities,.
  $target_type = $field['settings']['target_type'];
  entity_load($target_type, $ids);
  $items = array();
  foreach ($ids as $id) {
    $entity = entity_load_single($target_type, $id);
    if (entity_access('view', $target_type, $entity)) {
      $items[] = array('target_id' => $id);
    }
  }
  $cache[$identifier] = $items;
  return $items;
}
